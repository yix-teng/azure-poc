{
	"name": "Notebook 3",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "deltalake",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/dedfa758-9fb0-4c1b-b0e2-25c590d4f804/resourceGroups/SCB-POC-DEV/providers/Microsoft.Synapse/workspaces/sqlservlessinternalselfmanaged/bigDataPools/deltalake",
				"name": "deltalake",
				"type": "Spark",
				"endpoint": "https://sqlservlessinternalselfmanaged.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/deltalake",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://tpcdata@scbpocdev.dfs.core.windows.net/tpcds/web_returns/wr_returned_date_sk=2450825/part-00156-47802303-db48-4fed-9126-0e0b84aa2db9.c000.snappy.parquet', format='parquet')\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"spark.conf.set(\"fs.azure.account.auth.type\", \"SAS\")\n",
					"spark.conf.set(\"fs.azure.sas.token.provider.type\", \"com.microsoft.azure.synapse.tokenlibrary.ConfBasedSASProvider\")\n",
					"spark.conf.set(\"spark.storage.synapse.sas\", \"?sv=2020-08-04&ss=bfqt&srt=sco&sp=rwdlacupx&se=2021-09-30T20:28:42Z&st=2021-08-29T12:28:42Z&spr=https&sig=tp510hNvWZYC0bnnGZOrJRHZSOyWvGpLZBb%2BfBsWP88%3D\")\n",
					"\n",
					"\n",
					"df = spark.sql(\"select count(*) from sparkdb.reason\")\n",
					"df.show()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\n",
					"# retrieve connectionstring from TokenLibrary\n",
					"\n",
					"from pyspark.sql import SparkSession\n",
					"\n",
					"sc = SparkSession.builder.getOrCreate()\n",
					"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\n",
					"connection_string = token_library.getConnectionString(\"ADLS_SPARK\")\n",
					"print(connection_string)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"spark.conf.set(\"fs.azure.account.auth.type\", \"SAS\")\n",
					"spark.conf.set(\"fs.azure.sas.token.provider.type\", \"com.microsoft.azure.synapse.tokenlibrary.ConfBasedSASProvider\")\n",
					"spark.conf.set(\"spark.storage.synapse.sas\", \"?sv=2020-08-04&ss=bfqt&srt=sco&sp=rwdlacupx&se=2021-09-30T20:28:42Z&st=2021-08-29T12:28:42Z&spr=https&sig=tp510hNvWZYC0bnnGZOrJRHZSOyWvGpLZBb%2BfBsWP88%3D\")\n",
					"\n",
					"\n",
					"spark.sql(\"\"\"\n",
					"CREATE TABLE `sparkdb`.`inventory` (`inv_item_sk` INT, `inv_warehouse_sk` INT, `inv_quantity_on_hand` INT, `inv_date_sk` INT)                           \n",
					"USING parquet                                                                                                                                 \n",
					"OPTIONS (                                                                                                                                     \n",
					"  path 'abfss://tpcdata@scbpocdev.dfs.core.windows.net/tpcds/inventory'                                              \n",
					")                                                                                                                                             \n",
					"PARTITIONED BY (inv_date_sk)\n",
					"\"\"\")\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"select count(*) from sparkdb.inventory"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\n",
					"df = spark.sql(\"SELECT count(*) FROM sparkdb.catalog_returns\")\n",
					"df.show(10)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"S"
				],
				"execution_count": null
			}
		]
	}
}